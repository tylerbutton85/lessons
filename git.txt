Tree house lesson: Git Basics

Introduction

VCS			| Version control system (record all changes)
cowboy			| Work without regard for desk best practices
repo			| collection of versions for one particular project
commit			| Save changes to a new version
changelog		| log that allows you to view all changes historically
share repos		| between different people working on them
Linus Torvalds		| Inventor of git and linux
distributed vcs		| no central repository / each user has own repo
github			| most popular / social network for repo's

Working with Repositories

use git --version	| find out if git is installed
git init name		| creates a new repo with that name
git init                | creates a new repo of folder you're in
rm -r .git		| remove git repo
git add FILENAME	| add files into repo within folder
ZZ			| Finish adding git commit message vim
git config --global	| Edit details of a commit
git config --global user.name	| define user name
git config --global user.email	| define user email
When should i commit?	| When you have a relevant commit message to write
git commit -a		| all changes 
git commit -a -m	| all changes with message
git status		| shows current status

Looking back on previous changes

git log			| shows log of all of our commits
unique commit id	| all called hash (yellow highlight)
git checkout		| view different version from the one looking at currently
git master		| go back to master branch
git diff		| view was different between to versions of repo

Working with branches

branches		| Alternate versions that run in paralle to the original trunk
master branch		| also known as trunk
git branch NAME		| create new branch name
git checkout master	| return to trunk
git checkout NAME	| switch to new branch
git checkout -b NAME	| Creates a branch of NAME and switches to it directly 
git branch		| Shows list of all branches
git branch -D name	| Deletes branch with name

Introduction to Merging

merging			| bringing together commits in branches back into trunk
merge conflict		| have to make decision about which changes to commit to trunk
git merge branchName	| merges the history of branch name to current branch 
 
Working with remotes

git log			| shows log of all of our commits
unique commit id	| all called hash (yellow highlight)
git checkout		| view different version from the one looking at currently
git master		| go back to master branch
git diff		| view was different between to versions of repo

Working with branches

branches		| Alternate versions that run in paralle to the original trunk
master branch		| also known as trunk
git branch NAME		| create new branch name
git checkout master	| return to trunk
git checkout NAME	| switch to new branch
git checkout -b NAME	| Creates a branch of NAME and switches to it directly 
git branch		| Shows list of all branches
git branch -D name	| Deletes branch with name

Introduction to Merging

merging			| bringing together commits in branches back into trunk
merge conflict		| have to make decision about which changes to commit to trunk
git merge branchName	| merges the history of branch name to current branch 
 
Working with remotes

pushing			| push changes to a remote repo
pulling			| pull changes from a remote repo
cloning			| first step, clone from remote to local

git clone URL NAME	| create a clone from remote
git remote		| show all remotes attached to repo
git remote add NAME URL		| attaches remote to local version
git push REMOTE-NAME BRANCH-NAME	| pushes local branch changes to remote
git pull REMOTE-NAME BRANCH-NAME	| pull changes from remote branch
pull requests 		| like branches, place for people to work on / discuss changes
fork			| Creates a clone in own Github account


Feature branches	| New branch for new features or substantial changes
GitFlow			| new branch for everything / change you make
git flow init		| start new git flow repo 
git flow feature start feature_name	| create new branch with feature as name
git flow feature finish feature_name	| completes branch and merges for you
git flow hot fix start name		| creates branch on master with the hot fix names
git flow hot fix finish name		| finishes hot fix and merges





